{"version":3,"sources":["ENUM.ts","API.ts","actions/index.ts","components/NewsItem.tsx","components/App.tsx","reducers/index.ts","index.tsx"],"names":["actionTypes","axios","create","baseURL","NewsItem","story","title","description","urlToImage","url","source","className","src","alt","name","type","href","_App","renderNewsList","props","news","map","key","this","getNews","React","Component","App","connect","state","dispatch","a","API","get","data","console","log","articles","payload","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"gJAAYA,E,+HCIGC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAO,8DAHa,mCAGb,sC,SDLCH,O,sBAAAA,M,KEyBL,IClBMI,EAAW,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAEfC,EAA+CD,EAA/CC,MAAOC,EAAwCF,EAAxCE,YAAaC,EAA2BH,EAA3BG,WAAYC,EAAeJ,EAAfI,IAAKC,EAAUL,EAAVK,OAE5C,OAEI,yBAAKC,UAAU,QACX,yBAAKC,IAAKJ,EAAYG,UAAU,eAAeE,IAAKP,IACpD,yBAAKK,UAAU,aACX,wBAAIA,UAAU,cAAcL,GAC5B,uBAAGK,UAAU,aAAaJ,GAG1B,yBAAKI,UAAU,oEACX,2BAAOA,UAAU,gBAAgBD,EAAOI,MACxC,yBAAKH,UAAU,aACX,uBAAGI,KAAK,SAASC,KAAMP,EAAKE,UAAU,kCAAtC,aCXXM,EAAb,2MAEIC,eAAiB,WACb,OAAO,EAAKC,MAAMC,KAAKC,KAAI,SAAChB,GACxB,OAAO,kBAAC,EAAD,CAAUA,MAAOA,EAAOiB,IAAKjB,EAAMI,UAJtD,mFASQc,KAAKJ,MAAMK,YATnB,+BAcQ,OACI,6BACI,yBAAKb,UAAU,aAEX,yBAAKA,UAAU,UACX,uBAAGK,KAAK,IAAIL,UAAU,gBAAtB,uBACA,0BAAMA,UAAU,wCAEb,uBAAIK,KAAK,IAAT,6BAEC,uBAAGL,UAAU,2BAA2BK,KAAK,qCAE7C,uBAAGL,UAAU,6BAA6BK,KAAK,8CAKvD,yBAAKL,UAAU,gBACVY,KAAKL,wBAhC9B,GAA0BO,IAAMC,WA8CnBC,EAAMC,aAJK,SAACC,GACrB,OAAOA,IAGiC,CAACL,QFjCtB,yDAAM,WAAOM,GAAP,iBAAAC,EAAA,sEAELC,EAAIC,IAA8B,IAF7B,gBAElBC,EAFkB,EAElBA,KAEPC,QAAQC,IAAIF,EAAKG,UACjBP,EAAwB,CAACf,KAAKf,EAAYwB,QAASc,QAASJ,EAAKG,WALxC,2CAAN,wDEiCJT,CAAoCX,GCzC1CsB,EAAWC,YAA4B,CAACpB,KATxC,WAAmD,IAAlDS,EAAiD,uDAA7B,GAAIY,EAAyB,uCAC7D,OAAQA,EAAO1B,MACb,KAAKf,EAAYwB,QACf,OAAOiB,EAAOH,QAChB,QACE,OAAOT,MCFPa,EAAQC,YAAYJ,EAAUK,YAAgBC,MAEpDC,IAASC,OAAQ,kBAAC,IAAD,CAAUL,MAAOA,GAAO,kBAACf,EAAD,OACzCqB,SAASC,cAAc,Y","file":"static/js/main.1551fa0c.chunk.js","sourcesContent":["export enum actionTypes{\n    getNews\n}","import axios from \"axios\";\n\nconst API_KEY: string = \"bb91ea304b55479293619f2e62f8100d\";\n\nexport default axios.create({\n    baseURL : `https://newsapi.org/v2/everything?q=Security&apiKey=${API_KEY}&sortBy=publishedAt&pageSize=99`,\n});","import API from \"../API\";\nimport {Dispatch} from \"redux\";\nimport {actionTypes} from \"../ENUM\";\n\nexport interface newsItem {\n    title: string,\n    description:string,\n    url:string,\n    urlToImage:string\n    source: {\n        id: string | null;\n        name: string\n    }\n}\n\nexport interface getNewsAction {\n    type: actionTypes.getNews,\n    payload: newsItem[]\n}\n\ninterface GetNewsResponseInterface {\n    articles: newsItem[]\n\n}\n\nexport const getNews = () => async (dispatch:Dispatch) =>{\n\n    const {data}= await API.get<GetNewsResponseInterface>(\"\");\n\n    console.log(data.articles);\n    dispatch<getNewsAction>({type:actionTypes.getNews, payload: data.articles})\n};\n\n","import React from \"react\";\nimport {newsItem} from \"../actions\";\n\ninterface NewsItemProps {\n    story: newsItem\n}\n\nexport const NewsItem = ({story}: NewsItemProps): JSX.Element => {\n\n    const {title, description, urlToImage, url, source} = story;\n\n    return (\n        //  onClick={()=> window.open(url, \"_blank\")} - onClick can be applied to the div below\n        <div className=\"card\">\n            <img src={urlToImage} className=\"card-img-top\" alt={title}/>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{title}</h5>\n                <p className=\"card-text\">{description}</p>\n\n\n                <div className=\"d-flex justify-content-between align-items-center border-primary\">\n                    <small className=\"text-primary\">{source.name}</small>\n                    <div className=\"btn-group\">\n                        <a type=\"button\" href={url} className=\"btn btn-sm btn-outline-primary\">View</a>\n\n                    </div>\n\n                </div>\n\n            </div>\n        </div>\n\n\n    );\n};","import React from \"react\"\nimport {getNews} from \"../actions\";\nimport {storeState} from \"../reducers\";\nimport {connect} from \"react-redux\";\nimport {newsItem} from \"../actions\";\nimport {NewsItem} from \"./NewsItem\";\n\ninterface _AppProps {\n    getNews: () => {}\n    news: newsItem[]\n}\n\nexport class _App extends React.Component<_AppProps> {\n\n    renderNewsList = () => {\n        return this.props.news.map((story: newsItem) => {\n            return <NewsItem story={story} key={story.url}/>\n        })\n    };\n\n    componentDidMount(): void {\n        this.props.getNews();\n    }\n\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <div className=\"container\">\n\n                    <nav className=\"navbar\">\n                        <a href=\"/\" className=\"navbar-brand\">News.ly : Security </a>\n                        <span className=\"navbar-text text-primary text-large \">\n\n                           <a  href=\"\"> Okorie Chiemerie (Chief)</a>\n\n                            <a className=\" nav-link fab fa-twitter\" href=\"https://twitter.com/chief_emerie\" />\n\n                            <a className=\" nav-link fab fa-instagram\" href=\"https://www.instagram.com/chief.emerie/\" />\n\n                        </span>\n                    </nav>\n\n                    <div className=\"card-columns\">\n                        {this.renderNewsList()}\n                    </div>\n                </div>\n            </div>\n\n\n        )\n    };\n}\n\nconst mapStateToProps = (state: storeState): { news: newsItem[] } => {\n    return state;\n};\n\nexport const App = connect(mapStateToProps, {getNews})(_App);\n","import {combineReducers} from \"redux\";\nimport {newsItem, getNewsAction} from \"../actions\";\nimport {actionTypes} from \"../ENUM\";\n\nexport interface storeState {\n  news : newsItem[]\n}\n\nconst news = (state: newsItem[] = [], action: getNewsAction) =>{\n  switch (action.type) {\n    case actionTypes.getNews:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport const reducers = combineReducers<storeState>({news});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {Provider} from \"react-redux\"\n\nimport {App} from \"./components/App\";\nimport {reducers} from './reducers';\n\n\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render( <Provider store={store}><App/></Provider>,\ndocument.querySelector('#root'));"],"sourceRoot":""}